import Product from "@/components/product";
import { ShopSidebar } from "@/components/sidebar";
import { Col, Pagination, Row } from "antd";
import { GetServerSideProps } from "next";
import Head from "next/head";
import useQueryParam from "@/hooks/useQueryParam";
import clientPromise from "@/lib/mongodb";
import { ProductProps, getProducts } from "@/lib/api/product";
import { BrandProps, getAllBrands } from "@/lib/api/brand";

type sidebarOptionProps = {
  key: string;
  label: string;
  value: string;
};

export type sidebarItemProps = {
  key: string;
  label: string;
  type: "checkbox" | "radio";
  slug: string;
  options: Array<sidebarOptionProps>;
};

const SidebarItems = {
  brands: {
    key: "brands",
    label: "Brands",
    type: "checkbox",
    slug: "brands",
    options: [
      {
        key: "nike",
        label: "Nike",
        value: "nike",
      },
      {
        key: "adidas",
        label: "Adidas",
        value: "adidas",
      },
      {
        key: "puma",
        label: "Puma",
        value: "puma",
      },
      {
        key: "reebok",
        label: "Reebok",
        value: "reebok",
      },
      {
        key: "jordan",
        label: "Jordan",
        value: "jordan",
      },
    ],
  } as sidebarItemProps,
  sizes: {
    key: "sizes",
    label: "Sizes",
    type: "checkbox",
    slug: "sizes",
    options: [
      {
        key: "30.0",
        label: "30.0",
        value: "30.0",
      },
      {
        key: "30.5",
        label: "30.5",
        value: "30.5",
      },
      {
        key: "31.0",
        label: "31.0",
        value: "31.0",
      },
      {
        key: "31.5",
        label: "31.5",
        value: "31.5",
      },
      {
        key: "32.0",
        label: "32.0",
        value: "32.0",
      },
      {
        key: "32.5",
        label: "32.5",
        value: "32.5",
      },
      {
        key: "33.0",
        label: "33.0",
        value: "33.0",
      },
    ],
  } as sidebarItemProps,
  priceRange: {
    key: "priceRange",
    label: "Price Range",
    type: "radio",
    slug: "range",
    options: [
      {
        key: "1",
        label: "Less than 1.000.000",
        value: "1",
      },
      {
        key: "2",
        label: "1.000.000 - 3.000.000",
        value: "2",
      },
      {
        key: "3",
        label: "3.000.000 - 7.000.000",
        value: "3",
      },
      {
        key: "4",
        label: "7.000.000 - 15.000.000",
        value: "4",
      },
      {
        key: "5",
        label: "More than 15.000.000",
        value: "5",
      },
    ],
  } as sidebarItemProps,
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  try {
    await clientPromise
  } catch(err) {

  }

  const queryParams = Object.keys(context.query).reduce((cur, key) => {
    let queryKeys = (context.query[key] as string).split(",");
    context.query[key] = queryKeys;
    return {
      ...cur,
      [key]: queryKeys,
    };
  }, {})

  const products = await getProducts(queryParams)
  const brands = await getAllBrands()
  return {
    props: {
      products: JSON.parse(JSON.stringify(products)),
      brands
    },
  };
};

interface ShopProps {
  products: ProductProps[];
  brands: BrandProps[]
}

export default function Shop<NextPage>({ products, brands, ...props }: ShopProps) {
  const { router, pathname, searchParams, createQueryString } = useQueryParam();

  return (
    <>
      <Head>
        <title>Sneaker Store - Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/main-logo.jpg" />
      </Head>
      <main>
          <Row gutter={16}>
            <Col span={4}>
              <ShopSidebar
                brands={brands}
                sizes={SidebarItems.sizes}
                priceRange={SidebarItems.priceRange}
              />
            </Col>
            <Col span={20}>
              <Row gutter={16}>
                {products.map((product) => (
                  <Col key={product.modelId} span={6}>
                    <Product {...product} />
                  </Col>
                ))}
              </Row>
              <Row className="mt-20">
                <Col span={24} className="flex justify-center">
                  <Pagination
                    showSizeChanger={false}
                    defaultCurrent={1}
                    total={100}
                    onChange={(page) =>
                      router.push(
                        pathname +
                          "?" +
                          createQueryString("page", page.toString())
                      )
                    }
                  />
                </Col>
              </Row>
            </Col>
          </Row>
      </main>
    </>
  );
}
